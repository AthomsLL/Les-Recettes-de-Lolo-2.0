// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  password        String
  name            String
  username        String    @unique
  isAdmin         Boolean?  @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  recipes         Recipe[]
  comments        Comment[]
  refreshToken    RefreshToken[]
  recipeFiles     RecipeFile[]
  avatarFiles     AvatarFile[]
}

model RefreshToken {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  token           String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String    @db.ObjectId
}

model Recipe {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  category        String 
  difficulty      String 
  rating          Int      @default(0)
  usersLiked      String[]
  nbrPersons      String
  preptime        String
  cooktime        String
  ingredients     Json[]
  steps           Json[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String    @db.ObjectId
  comments        Comment[]
  recipeFiles     RecipeFile[]
}

model Comment {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  rating          Int       @default(0)
  usersLiked      String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  recipe          Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeId        String    @db.ObjectId
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String    @db.ObjectId
}

model RecipeFile {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  url               String
  providerPublicId  String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId            String  @db.ObjectId  
  recipe            Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeId          String  @db.ObjectId
}

model AvatarFile {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  url               String
  providerPublicId  String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String  @db.ObjectId
}